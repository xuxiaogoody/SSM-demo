<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	    http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop
	    http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
<!-- spring的配置文件，这里配置和业务逻辑相关 -->
<!-- 数据源，事物控制 -->
        <!-- 扫描所有包，但不扫描controller -->
<context:component-scan base-package="com.xuxiao.crud">
        <context:exclude-filter type="annotation" expression="org.springframework.web.servlet.mvc.Controller"/>
</context:component-scan>
       <!-- 加载properties文件 -->
<context:property-placeholder location="classpath:dbconfig.properties"/>
       <!-- 开启连接数据库线程池 -->
<bean id="PooledDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>
        <property name="driverClass" value="${jdbc.driverClass}"></property>
        <property name="user" value="${jdbc.user}"></property>
        <property name="password" value="${jdbc.password}"></property>
</bean>

<!-- ======= 配置和mybatis的整合========= -->
<!-- 下面一个bean指的是mybatis的核心配置文件位置 -->
<bean id="SqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
          <!-- 指定mybatis全局配置文件的位置:当前路径下的mybatis-config.xml -->
          <property name="configLocation" value="classpath:mybatis-config.xml"></property>
          <!-- 指定数据源,就是上面配的PooledDataSource -->
          <property name="dataSource" ref="PooledDataSource"></property>
          <!--指定mybatis的mapper文件位置：当前路径下mapper包里的所有xml文件  -->
          <property name="mapperLocations" value="classpath:mapper/*.xml"></property>
</bean>

<!-- 配置扫描器，将mybatis的接口实现加入ioc容器之中 -->
<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
         <!-- 扫描所有的dao接口实现，加入到我们的ioc容器中  -->
        <property name="basePackage" value="com.xuxiao.crud.dao"></property>
</bean>
<!-- 配置一个可以执行批量的sqlSession,ref="SqlSessionFactory"指的就是上面的bean id="SqlSessionFactory" -->
<bean id="sqlSeesion" class="org.mybatis.spring.SqlSessionTemplate">
         <constructor-arg name="sqlSessionFactory" ref="SqlSessionFactory"></constructor-arg>
         <constructor-arg name="executorType" value="BATCH"></constructor-arg>
</bean>
<!-- =======mybatis整合配置到此结束======= -->
<!-- 事物控制的配置 -->
<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
          <!-- 控制住数据源 -->
          <property name="dataSource" ref="PooledDataSource"></property>
</bean>
<!-- 开启基于注解的事物，也可以使用xml配置形式的事物（必要主要的都是配置式）  -->
<aop:config> 
           <!-- 切入点表达式 -->
           <!--  其中第一个*代表返回值，第二*代表service下子包，第三个*代表方法名，“（..）”代表方法参数。 -->
          <aop:pointcut expression="execution(* com.xuxiao.crud.service..*(..))" id="txPoint"/>
          <!-- 配置事物增强 -->
          <aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>
</aop:config>
<!-- 配置事务增强，即事务如何切入,ps:注意transaction-manager与上面的事务控制配置bean id相同 -->
<tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
                  <!-- 所有方法都是事务方法 -->
                  <tx:method name="*"/>
                  <!-- 以get开始的所有方法  -->
                  <tx:method name="get*" read-only="true"/>
        </tx:attributes>
</tx:advice>
<!-- spring配置核心点（数据源，与mybatis整合，事务控制） -->
</beans>
